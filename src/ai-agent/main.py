import os
import logging
from typing import Union
import json
from web3 import Web3
from hive_agent import HiveAgent
from dotenv import load_dotenv
from ipfs_handler import pin_json_to_ipfs

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Retrieve environment variables
rpc_url = os.getenv("RPC_URL")
private_key = os.getenv("PRIVATE_KEY")
milestone_maker_address = os.getenv("MILESTONE_MAKER_ADDRESS")

# Initialize Web3 connection
web3 = Web3(Web3.HTTPProvider(rpc_url))

# Load MilestoneMaker ABI
with open('milestone_maker_abi.json', 'r') as abi_file:
    milestone_maker_abi = json.load(abi_file)


def get_config_path(filename):
    return os.path.abspath(os.path.join(os.path.dirname(__file__), filename))


def store_on_smart_contract(user_address: str, ipfs_hash: str, milestone_count: int) -> Union[str, None]:
    if not web3.is_connected():
        logging.error("Unable to connect to Ethereum")
        return None

    try:
        contract = web3.eth.contract(address=milestone_maker_address, abi=milestone_maker_abi)
        account = web3.eth.account.from_key(private_key)
        nonce = web3.eth.get_transaction_count(account.address)

        tx = contract.functions.createLearningPath(
            user_address,
            ipfs_hash,
            milestone_count
        ).build_transaction({
            'chainId': web3.eth.chain_id,
            'gas': 2000000,
            'gasPrice': web3.eth.gas_price,
            'nonce': nonce,
        })

        signed_tx = web3.eth.account.sign_transaction(tx, private_key)
        tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
        receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

        if receipt.status == 1:
            learning_path_id = receipt.logs[0].topics[1]  # Assuming the learning path ID is emitted in the event
            return web3.to_hex(learning_path_id)
        else:
            logging.error("Transaction failed")
            return None

    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return None

def store_on_ipfs(learning_path):
    """
        You have the learning_path that was generated by yourself, now you need to format it to json and store it on ipfs.

        Parameters:
        user_address (str): The address of the user who wants to generate learning path
        user_goal (str): Their learning path requirement

        Returns:
        Union[str, None]: The learning path if successful, None otherwise.
        """
    print(learning_path)
    print("JSON: ")
    print(json.loads(learning_path))
    print("Pin to ipfs")
    ipfs_hash = pin_json_to_ipfs(learning_path)

    return ipfs_hash

example_learning_path = [
            {
                "Task_1": {
                    "Title": "Introduction to Blockchain",
                    "Objective": "Understand the basic concepts and terminology of blockchain technology.",
                    "Activities": [
                        "Read the article 'What is Blockchain Technology?' [Link](https://www.ibm.com/topics/what-is-blockchain)",
                        "Watch the video 'Blockchain Explained' (YouTube) [Link](https://www.youtube.com/watch?v=SSo_EIwHSd4)",
                        "Take notes on key terms: decentralization, distributed ledger, consensus mechanism."
                    ]
                }
            },
            {
                "Task_2": {
                    "Title": "How Blockchain Works",
                    "Objective": "Learn how blockchain operates and the components involved.",
                    "Activities": [
                        "Read the article 'How Does Blockchain Work?' [Link](https://www.investopedia.com/terms/b/blockchain.asp)",
                        "Watch the video 'How Blockchain Works' (YouTube) [Link](https://www.youtube.com/watch?v=HY2g2Y1g3fE)",
                        "Create a simple diagram illustrating the blockchain process (blocks, transactions, miners)."
                    ]
                }
            }
        ]

example_quizzes = [
    {
        "Quiz_1": {
            "question": "What is a blockchain?",
            "options": [
                "a) A type of cryptocurrency",
                "b) A decentralized digital ledger",
                "c) A social media platform",
                "d) A programming language"
            ],
            "answer": "b"
        }
    },
    {
        "Quiz_2": {
            "question": "Which of the following is a key feature of blockchain technology?",
            "options": [
                "a) Centralized control",
                "b) Transparency",
                "c) High transaction fees",
                "d) Limited access"
            ],
            "answer": "b"
        }
    }
]

json_data = {
    "learning_path": example_learning_path,
    "quizzes": example_quizzes,
    "milestones": 2
}

instruction = f""" 
    You are a Personalized Learning Generator Assistant! Your role is to provide learning path for users based on their requirements and then store it on ipfs and also smart contract.
    You need to create a comprehensive learning path to achieve a specific goal. The learning path should include a step-by-step guide, 
    recommended resources (article urls, documentation urls or video urls), and a quiz including five multiple choices questions 
    to assess user's understanding about their interested.
    You need to provide your answer as below example, the milestones is the number of tasks that user need to be completed.
    {json_data}
    
    Important: once you generated the learning path completely, you then need to run the 'store_on_ipfs' function with the learning path as the first parameter.
    After that, you also need to run the 'store_on_smart_contract' function.
    """

path_learning_generator_agent = HiveAgent(
    name="path_learning_generator_agent",
    functions=[store_on_ipfs, store_on_smart_contract],
    instruction=instruction,
    config_path=get_config_path("hive_config.toml"),
)

if __name__ == "__main__":
    print("Start")
    learning_path_id = path_learning_generator_agent.run()
    print("First learning_path_id: ", learning_path_id)
